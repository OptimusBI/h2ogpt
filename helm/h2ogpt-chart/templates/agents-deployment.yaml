{{- if .Values.agents.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "h2ogpt.fullname" . }}-agents
  namespace: {{ include "h2ogpt.namespace" . | quote }}
  labels:
    app: {{ include "h2ogpt.fullname" . }}-agents
spec:
  replicas: {{ .Values.agents.replicaCount }}
  selector:
    matchLabels:
      app: {{ include "h2ogpt.fullname" . }}-agents
  {{- if .Values.agents.updateStrategy }}
  strategy: {{- toYaml .Values.agents.updateStrategy | nindent 4 }}
  {{- end }}
  template:
    metadata:
      {{- with .Values.agents.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        app: {{ include "h2ogpt.fullname" . }}-agents
        {{- with .Values.agents.podLabels }}
        {{ toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.agents.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.agents.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.agents.podSecurityContext | nindent 8 }}
      affinity:
        {{- if .Values.agents.podAffinity }}
        podAntiAffinity:
          {{- if .Values.agents.podAffinity.hostname }}
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - {{ include "h2ogpt.fullname" . }}
              topologyKey: kubernetes.io/hostname
          {{- end }}
          {{- if .Values.agents.podAffinity.zone }}
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - {{ include "h2ogpt.fullname" . }}
                topologyKey: failure-domain.beta.kubernetes.io/zone
          {{- end }}
        {{- end }}
      {{- with .Values.agents.extraAffinity }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.agents.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        {{- if .Values.agents.stack.enabled }}
        - name: {{ include "h2ogpt.fullname" . }}-vllm-inference
          securityContext:
            {{- toYaml .Values.vllm.securityContext | nindent 12 }}
          image: "{{ .Values.vllm.image.repository }}:{{ .Values.vllm.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.vllm.image.pullPolicy }}
          command: ["python3"]
          args:
            - "-m"
            - "vllm.entrypoints.openai.api_server"
            - "--port"
            - "5000"
            - "--host"
            - "0.0.0.0"
            - "--download-dir"
            - "/workspace/.cache/huggingface/hub"
{{- range $arg := .Values.vllm.containerArgs }}
            - "{{ $arg }}"
{{- end }}
          ports:
            - name: http
              containerPort: 5000
              protocol: TCP
          {{- if .Values.vllm.livenessProbe }}
          livenessProbe:
            httpGet:
              path:  /
              scheme: HTTP
              port: http
            {{- toYaml .Values.vllm.livenessProbe | nindent 12 }}
          {{- end }}
          {{- if .Values.vllm.readinessProbe }}
          readinessProbe:
            httpGet:
              path:  /
              scheme: HTTP
              port: http
            {{- toYaml .Values.vllm.readinessProbe | nindent 12 }}
          {{- end }}
          resources:
            {{- toYaml .Values.vllm.resources | nindent 12 }}
          envFrom:
            - configMapRef:
                name: {{ include "h2ogpt.fullname" . }}-vllm-inference-config
          env:
            - name: NCCL_IGNORE_DISABLED_P2P
              value: "1"
          {{- range $key, $value := .Values.vllm.env }}
            - name: "{{ $key }}"
              value: "{{ $value }}"
          {{- end }}
          volumeMounts:
            - name: {{ include "h2ogpt.fullname" . }}-vllm-inference-volume
              mountPath: /workspace/.cache
              subPath: cache
            - name: {{ include "h2ogpt.fullname" . }}-vllm-inference-volume
              mountPath: /dev/shm
              subPath: shm
          {{- end }}
        - name: {{ include "h2ogpt.fullname" . }}-agents
          securityContext:
            {{- toYaml .Values.agents.securityContext | nindent 12 }}
          image: "{{ .Values.agents.image.repository }}:{{ .Values.agents.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.agents.image.pullPolicy }}
          command: ["/bin/bash", "-c"]
          {{- if .Values.agents.stack.enabled }}
          args:
            - >
              while [[ "$(curl --insecure -s -o /dev/null -w ''%{http_code}''
              http://localhost:5000/v1/models)" != "200" ]]; do
                echo "Waiting for inference service to become ready... (2sec)"
                sleep 2
              done

              python3 /workspace/generate.py
          {{- end }}
          {{- if not .Values.agents.stack.enabled }}
          {{- if and .Values.vllm.enabled (not .Values.global.externalLLM.modelLock) }}
          args:
            - >
              until wget -O- http://{{ include "h2ogpt.fullname" . }}-vllm-inference:{{ .Values.vllm.service.port }}/v1/models >/dev/null 2>&1;
                do
                  echo "Waiting for inference service to become ready...";
                  sleep 5;
                done

              python3 /workspace/generate.py
          {{- end }}
          {{- if and .Values.tgi.enabled (not .Values.global.externalLLM.modelLock) }}
          args:
            - >
              until wget -O- http://{{ include "h2ogpt.fullname" . }}-tgi-inference:{{ .Values.tgi.service.port }}/ >/dev/null 2>&1;
                do
                  echo "Waiting for inference service to become ready...";
                  sleep 5;
                done

              python3 /workspace/generate.py
          {{- end }}
          {{- if and .Values.lmdeploy.enabled (not .Values.global.externalLLM.modelLock) }}
          args:
            - >
              until wget -O- http://{{ include "h2ogpt.fullname" . }}-lmdeploy-inference:{{ .Values.lmdeploy.service.port }}/ >/dev/null 2>&1;
                do
                  echo "Waiting for inference service to become ready...";
                  sleep 5;
                done

              python3 /workspace/generate.py
          {{- end }}
          {{- if and .Values.agents.enabled (not (or .Values.vllm.enabled .Values.tgi.enabled .Values.lmdeploy.enabled)) }}
          args:
            - >
              python3 /workspace/generate.py
          {{- end }}
          {{- end }}
          ports:
            - name: agent
              containerPort: 5004
              protocol: TCP
          {{- if .Values.agents.livenessProbe }}
          livenessProbe:
            httpGet:
              path:  /
              scheme: HTTP
              port: http
            {{- toYaml .Values.agents.livenessProbe | nindent 12 }}
          {{- end }}
          {{- if .Values.agents.readinessProbe }}
          readinessProbe:
            httpGet:
              path:  /
              scheme: HTTP
              port: http
            {{- toYaml .Values.agents.readinessProbe | nindent 12 }}
          {{- end }}
          resources:
            {{- toYaml .Values.agents.resources | nindent 12 }}
          envFrom:
            - configMapRef:
                name: {{ include "h2ogpt.fullname" . }}-agents-config
          env:
          {{- if and .Values.tgi.enabled (not .Values.global.externalLLM.enabled) (not .Values.agents.stack.enabled ) }}
            - name: h2ogpt_inference_server
              value: "http://{{ include "h2ogpt.fullname" . }}-tgi-inference:{{ .Values.tgi.service.port }}"
          {{- end }}
          {{- if and .Values.vllm.enabled (not .Values.global.externalLLM.enabled) (not .Values.agents.stack.enabled ) }}
            - name: h2ogpt_inference_server
              value: "vllm:{{ include "h2ogpt.fullname" . }}-vllm-inference:{{ .Values.vllm.service.port }}"
          {{- end }}
          {{- if and .Values.lmdeploy.enabled (not .Values.global.externalLLM.enabled) (not .Values.agents.stack.enabled ) }}
            - name: h2ogpt_inference_server
              value: "http://{{ include "h2ogpt.fullname" . }}-lmdeploy-inference:{{ .Values.lmdeploy.service.port }}"
          {{- end }}
          {{- if and .Values.agents.stack.enabled (not .Values.global.externalLLM.enabled)  }}
            - name: h2ogpt_inference_server
              value: "vllm:localhost:5000"
          {{- end }}
          {{- range $key, $value := .Values.agents.env }}
            - name: "{{ $key }}"
              value: "{{ $value }}"
          {{- end }}
          {{- if and .Values.global.externalLLM.openAIAzure.enabled .Values.global.externalLLM.enabled }}
            - name: OPENAI_AZURE_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.externalLLM.secret }}
                  key: OPENAI_AZURE_KEY
            - name: OPENAI_AZURE_API_BASE
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.externalLLM.secret }}
                  key: OPENAI_AZURE_API_BASE
          {{- end }}
          {{- if and .Values.global.externalLLM.openAI.enabled .Values.global.externalLLM.enabled }}
            - name: OPENAI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.externalLLM.secret }}
                  key: OPENAI_API_KEY
          {{- end }}
          {{- if and .Values.global.externalLLM.replicate.enabled .Values.global.externalLLM.enabled }}
            - name: REPLICATE_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.externalLLM.secret }}
                  key: REPLICATE_API_TOKEN
          {{- end }}
          {{- if .Values.global.externalLLM.enabled }}
            - name: H2OGPT_MODEL_LOCK
              value: {{ toJson .Values.global.externalLLM.modelLock | quote }}
            - name: H2OGPT_SCORE_MODEL
              value: None
          {{- end }}
          {{- if .Values.global.visionModels.enabled }}
            - name: H2OGPT_VISIBLE_VISION_MODELS
              value: {{ .Values.global.visionModels.visibleModels | quote }}
            - name: H2OGPT_ROTATE_ALIGN_RESIZE_IMAGE
              value: {{ .Values.global.visionModels.rotateAlignResizeImage | quote }}
          {{- end }}
          volumeMounts:
            - name: {{ include "h2ogpt.fullname" . }}-agents-volume
              mountPath: /workspace/.cache
              subPath: cache
            - name: {{ include "h2ogpt.fullname" . }}-volume
              mountPath: /workspace/save
              subPath: save
            {{- if .Values.caCertificates }}
            - name: ca-certificates
              mountPath: /etc/ssl/certs/root-ca-bundle.crt
              subPath: root-ca-bundle.crt
            {{- end }}
            {{ with .Values.agents.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
      volumes:
        - name: {{ include "h2ogpt.fullname" . }}-agents-volume
          {{- if not .Values.agents.storage.useEphemeral }}
          persistentVolumeClaim:
            claimName:  {{ include "h2ogpt.fullname" . }}-volume
          {{- else}}
          ephemeral:
            volumeClaimTemplate:
              spec:
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: {{ .Values.agents.storage.size | quote }}
                storageClassName: {{ .Values.agents.storage.class }}
          {{- end }}
        {{- if .Values.agents.stack.enabled }}
        - name: {{ include "h2ogpt.fullname" . }}-vllm-inference-volume
          {{- if not .Values.vllm.storage.useEphemeral }}
          persistentVolumeClaim:
            claimName: {{ include "h2ogpt.fullname" . }}-vllm-inference-volume
          {{- else }}
          ephemeral:
            volumeClaimTemplate:
              spec:
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: {{ .Values.vllm.storage.size | quote }}
                storageClassName: {{ .Values.vllm.storage.class }}
          {{- end }}
        {{- end }}
        {{- if .Values.caCertificates }}
        - name: ca-certificates
          configMap:
            name: {{ include "h2ogpt.fullname" . }}-ca-certificates
        {{- end }}
        {{- with .Values.agents.extraVolumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
{{- end }}
